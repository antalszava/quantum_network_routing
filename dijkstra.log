DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:asyncio:Using selector: EpollSelector
DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:asyncio:Using selector: EpollSelector
DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:root:deque([deque(['e', 'g', 'a']), deque(['d', 'e', 'g', 'h']), deque(['a', 'g', 'e']), deque(['c', 'a']), deque(['b', 'c']), deque(['f', 'e', 'd', 'c']), deque(['a', 'c', 'd']), deque(['h', 'a', 'c'])])
DEBUG:asyncio:Using selector: EpollSelector
DEBUG:root:Rebuilding the link between nodes e and g at 2018-12-17 13:17:53.791565
DEBUG:root:Link between e and g has been rebuilt.
DEBUG:root:This path took 4 long.
DEBUG:root:Rebuilding the link between nodes d and e at 2018-12-17 13:17:55.796959
DEBUG:root:Link between d and e has been rebuilt.
DEBUG:root:This path took 5 long.
DEBUG:root:This path took 2 long.
DEBUG:root:Rebuilding the link between nodes c and a at 2018-12-17 13:17:57.799695
DEBUG:root:Link between c and a has been rebuilt.
DEBUG:root:This path took 3 long.
DEBUG:root:Rebuilding the link between nodes b and c at 2018-12-17 13:17:59.802200
DEBUG:root:Link between b and c has been rebuilt.
DEBUG:root:This path took 3 long.
DEBUG:root:Rebuilding the link between nodes f and e at 2018-12-17 13:18:01.803571
DEBUG:root:Link between f and e has been rebuilt.
DEBUG:root:This path took 5 long.
DEBUG:root:Rebuilding the link between nodes a and c at 2018-12-17 13:18:03.805955
DEBUG:root:Link between a and c has been rebuilt.
DEBUG:root:This path took 4 long.
DEBUG:root:Rebuilding the link between nodes h and a at 2018-12-17 13:18:05.808372
DEBUG:root:Link between h and a has been rebuilt.
DEBUG:root:This path took 4 long.
DEBUG:root:Total time: 14.019759893417358
DEBUG:root:[Edge(start='a', end='b', cost=1, capacity=1), Edge(start='f', end='g', cost=1, capacity=1), Edge(start='b', end='a', cost=1, capacity=1), Edge(start='g', end='f', cost=1, capacity=1), Edge(start='g', end='h', cost=1, capacity=0), Edge(start='h', end='g', cost=1, capacity=0), Edge(start='g', end='a', cost=1, capacity=-1), Edge(start='a', end='g', cost=1, capacity=-1), Edge(start='e', end='g', cost=1, capacity=-1), Edge(start='g', end='e', cost=1, capacity=-1), Edge(start='e', end='g', cost=1, capacity=-1), Edge(start='g', end='e', cost=1, capacity=-1), Edge(start='b', end='c', cost=1, capacity=1), Edge(start='c', end='b', cost=1, capacity=1), Edge(start='b', end='c', cost=1, capacity=1), Edge(start='c', end='b', cost=1, capacity=1), Edge(start='f', end='e', cost=1, capacity=1), Edge(start='e', end='f', cost=1, capacity=1), Edge(start='f', end='e', cost=1, capacity=1), Edge(start='e', end='f', cost=1, capacity=1), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='c', end='d', cost=1, capacity=-1), Edge(start='d', end='c', cost=1, capacity=-1), Edge(start='h', end='a', cost=1, capacity=1), Edge(start='a', end='h', cost=1, capacity=1), Edge(start='h', end='a', cost=1, capacity=1), Edge(start='a', end='h', cost=1, capacity=1), Edge(start='a', end='c', cost=1, capacity=0), Edge(start='c', end='a', cost=1, capacity=0), Edge(start='a', end='c', cost=1, capacity=0), Edge(start='c', end='a', cost=1, capacity=0), Edge(start='a', end='c', cost=1, capacity=0), Edge(start='c', end='a', cost=1, capacity=0), Edge(start='a', end='c', cost=1, capacity=0), Edge(start='c', end='a', cost=1, capacity=0)]
DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:root:deque([deque(['c', 'a']), deque(['c', 'd', 'e', 'f']), deque(['h', 'g', 'f']), deque(['h', 'a', 'c']), deque(['c', 'a', 'h']), deque(['d', 'e']), deque(['e', 'd', 'c', 'b']), deque(['f', 'e', 'd', 'c'])])
DEBUG:asyncio:Using selector: EpollSelector
DEBUG:root:Rebuilding the link between nodes c and a at 2018-12-17 13:25:04.992884
DEBUG:root:Link between c and a has been rebuilt.
DEBUG:root:This path took 1 long.
DEBUG:root:Rebuilding the link between nodes c and d at 2018-12-17 13:25:06.997379
DEBUG:root:Link between c and d has been rebuilt.
DEBUG:root:This path took 3 long.
DEBUG:root:Rebuilding the link between nodes h and g at 2018-12-17 13:25:09.000381
DEBUG:root:Link between h and g has been rebuilt.
DEBUG:root:This path took 2 long.
DEBUG:root:Rebuilding the link between nodes h and a at 2018-12-17 13:25:11.003302
DEBUG:root:Link between h and a has been rebuilt.
DEBUG:root:This path took 2 long.
DEBUG:root:Rebuilding the link between nodes c and a at 2018-12-17 13:25:13.016323
DEBUG:root:Link between c and a has been rebuilt.
DEBUG:root:This path took 2 long.
DEBUG:root:Rebuilding the link between nodes d and e at 2018-12-17 13:25:15.019227
DEBUG:root:Link between d and e has been rebuilt.
DEBUG:root:This path took 1 long.
DEBUG:root:Rebuilding the link between nodes e and d at 2018-12-17 13:25:17.021707
DEBUG:root:Link between e and d has been rebuilt.
DEBUG:root:This path took 3 long.
DEBUG:root:Rebuilding the link between nodes f and e at 2018-12-17 13:25:19.023452
DEBUG:root:Link between f and e has been rebuilt.
DEBUG:root:This path took 3 long.
DEBUG:root:Total time: 16.03390121459961
DEBUG:root:[Edge(start='a', end='b', cost=1, capacity=1), Edge(start='e', end='g', cost=1, capacity=1), Edge(start='g', end='a', cost=1, capacity=1), Edge(start='b', end='a', cost=1, capacity=1), Edge(start='g', end='e', cost=1, capacity=1), Edge(start='a', end='g', cost=1, capacity=1), Edge(start='h', end='g', cost=1, capacity=1), Edge(start='g', end='h', cost=1, capacity=1), Edge(start='h', end='g', cost=1, capacity=1), Edge(start='g', end='h', cost=1, capacity=1), Edge(start='f', end='g', cost=1, capacity=0), Edge(start='g', end='f', cost=1, capacity=0), Edge(start='c', end='a', cost=1, capacity=1), Edge(start='a', end='c', cost=1, capacity=1), Edge(start='c', end='a', cost=1, capacity=1), Edge(start='a', end='c', cost=1, capacity=1), Edge(start='c', end='a', cost=1, capacity=1), Edge(start='a', end='c', cost=1, capacity=1), Edge(start='c', end='a', cost=1, capacity=1), Edge(start='a', end='c', cost=1, capacity=1), Edge(start='h', end='a', cost=1, capacity=0), Edge(start='a', end='h', cost=1, capacity=0), Edge(start='h', end='a', cost=1, capacity=0), Edge(start='a', end='h', cost=1, capacity=0), Edge(start='b', end='c', cost=1, capacity=0), Edge(start='c', end='b', cost=1, capacity=0), Edge(start='f', end='e', cost=1, capacity=1), Edge(start='e', end='f', cost=1, capacity=1), Edge(start='f', end='e', cost=1, capacity=1), Edge(start='e', end='f', cost=1, capacity=1), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='e', end='d', cost=1, capacity=0), Edge(start='d', end='e', cost=1, capacity=0), Edge(start='c', end='d', cost=1, capacity=-1), Edge(start='d', end='c', cost=1, capacity=-1), Edge(start='c', end='d', cost=1, capacity=-1), Edge(start='d', end='c', cost=1, capacity=-1)]
DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:root:deque([deque(['b', 'a', 'g', 'f']), deque(['c', 'd']), deque(['e', 'g']), deque(['g', 'h']), deque(['d', 'c', 'b']), deque(['a', 'h']), deque(['d', 'c', 'a']), deque(['g', 'a', 'c'])])
DEBUG:asyncio:Using selector: EpollSelector
DEBUG:root:Total time: 0.0023136138916015625
DEBUG:root:[Edge(start='a', end='b', cost=1, capacity=1), Edge(start='b', end='c', cost=1, capacity=1), Edge(start='c', end='d', cost=1, capacity=1), Edge(start='d', end='e', cost=1, capacity=1), Edge(start='e', end='f', cost=1, capacity=1), Edge(start='f', end='g', cost=1, capacity=1), Edge(start='g', end='h', cost=1, capacity=1), Edge(start='h', end='a', cost=1, capacity=1), Edge(start='a', end='c', cost=1, capacity=1), Edge(start='d', end='e', cost=1, capacity=1), Edge(start='e', end='g', cost=1, capacity=1), Edge(start='g', end='a', cost=1, capacity=1), Edge(start='b', end='a', cost=1, capacity=1), Edge(start='c', end='b', cost=1, capacity=1), Edge(start='d', end='c', cost=1, capacity=1), Edge(start='e', end='d', cost=1, capacity=1), Edge(start='f', end='e', cost=1, capacity=1), Edge(start='g', end='f', cost=1, capacity=1), Edge(start='h', end='g', cost=1, capacity=1), Edge(start='a', end='h', cost=1, capacity=1), Edge(start='c', end='a', cost=1, capacity=1), Edge(start='e', end='d', cost=1, capacity=1), Edge(start='g', end='e', cost=1, capacity=1), Edge(start='a', end='g', cost=1, capacity=1)]
DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:root:deque([deque(['g', 'a']), deque(['g', 'a', 'c']), deque(['d', 'e', 'g']), deque(['e', 'g', 'a', 'b']), deque(['h', 'g']), deque(['h', 'a', 'c']), deque(['c', 'a']), deque(['a', 'g', 'e'])])
DEBUG:asyncio:Using selector: EpollSelector
DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:root:deque([deque(['f', 'g', 'h']), deque(['d', 'e', 'g']), deque(['e', 'g', 'a', 'b']), deque(['e', 'd']), deque(['e', 'g', 'a']), deque(['h', 'g', 'e']), deque(['g', 'f']), deque(['e', 'd', 'c'])])
DEBUG:asyncio:Using selector: EpollSelector
DEBUG:root:Total time: 0.003631591796875
DEBUG:root:[Edge(start='a', end='b', cost=1, capacity=1), Edge(start='b', end='c', cost=1, capacity=1), Edge(start='c', end='d', cost=1, capacity=1), Edge(start='d', end='e', cost=1, capacity=1), Edge(start='e', end='f', cost=1, capacity=1), Edge(start='f', end='g', cost=1, capacity=1), Edge(start='g', end='h', cost=1, capacity=1), Edge(start='h', end='a', cost=1, capacity=1), Edge(start='a', end='c', cost=1, capacity=1), Edge(start='d', end='e', cost=1, capacity=1), Edge(start='e', end='g', cost=1, capacity=1), Edge(start='g', end='a', cost=1, capacity=1), Edge(start='b', end='a', cost=1, capacity=1), Edge(start='c', end='b', cost=1, capacity=1), Edge(start='d', end='c', cost=1, capacity=1), Edge(start='e', end='d', cost=1, capacity=1), Edge(start='f', end='e', cost=1, capacity=1), Edge(start='g', end='f', cost=1, capacity=1), Edge(start='h', end='g', cost=1, capacity=1), Edge(start='a', end='h', cost=1, capacity=1), Edge(start='c', end='a', cost=1, capacity=1), Edge(start='e', end='d', cost=1, capacity=1), Edge(start='g', end='e', cost=1, capacity=1), Edge(start='a', end='g', cost=1, capacity=1)]
DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:root:deque([deque(['d', 'e', 'g', 'h']), deque(['g', 'a', 'b']), deque(['g', 'e', 'd']), deque(['c', 'b']), deque(['g', 'a', 'c']), deque(['e', 'f']), deque(['c', 'd', 'e']), deque(['a', 'h'])])
DEBUG:asyncio:Using selector: EpollSelector
DEBUG:root:Total time: 0.002732515335083008
DEBUG:root:[Edge(start='a', end='b', cost=1, capacity=1), Edge(start='b', end='c', cost=1, capacity=1), Edge(start='c', end='d', cost=1, capacity=1), Edge(start='d', end='e', cost=1, capacity=1), Edge(start='e', end='f', cost=1, capacity=1), Edge(start='f', end='g', cost=1, capacity=1), Edge(start='g', end='h', cost=1, capacity=1), Edge(start='h', end='a', cost=1, capacity=1), Edge(start='a', end='c', cost=1, capacity=1), Edge(start='d', end='e', cost=1, capacity=1), Edge(start='e', end='g', cost=1, capacity=1), Edge(start='g', end='a', cost=1, capacity=1), Edge(start='b', end='a', cost=1, capacity=1), Edge(start='c', end='b', cost=1, capacity=1), Edge(start='d', end='c', cost=1, capacity=1), Edge(start='e', end='d', cost=1, capacity=1), Edge(start='f', end='e', cost=1, capacity=1), Edge(start='g', end='f', cost=1, capacity=1), Edge(start='h', end='g', cost=1, capacity=1), Edge(start='a', end='h', cost=1, capacity=1), Edge(start='c', end='a', cost=1, capacity=1), Edge(start='e', end='d', cost=1, capacity=1), Edge(start='g', end='e', cost=1, capacity=1), Edge(start='a', end='g', cost=1, capacity=1)]
DEBUG:root:This is the logfile for the Dijkstra routing algorithm on the quantum network at <built-in function time>
DEBUG:root:deque([deque(['c', 'b']), deque(['e', 'g', 'a']), deque(['a', 'g', 'e']), deque(['d', 'c', 'b']), deque(['a', 'c', 'd']), deque(['b', 'c', 'd', 'e']), deque(['g', 'f']), deque(['b', 'a', 'g'])])
DEBUG:asyncio:Using selector: EpollSelector
DEBUG:root:Total time: 0.0033621788024902344
DEBUG:root:[Edge(start='a', end='b', cost=1, capacity=1), Edge(start='b', end='c', cost=1, capacity=1), Edge(start='c', end='d', cost=1, capacity=1), Edge(start='d', end='e', cost=1, capacity=1), Edge(start='e', end='f', cost=1, capacity=1), Edge(start='f', end='g', cost=1, capacity=1), Edge(start='g', end='h', cost=1, capacity=1), Edge(start='h', end='a', cost=1, capacity=1), Edge(start='a', end='c', cost=1, capacity=1), Edge(start='d', end='e', cost=1, capacity=1), Edge(start='e', end='g', cost=1, capacity=1), Edge(start='g', end='a', cost=1, capacity=1), Edge(start='b', end='a', cost=1, capacity=1), Edge(start='c', end='b', cost=1, capacity=1), Edge(start='d', end='c', cost=1, capacity=1), Edge(start='e', end='d', cost=1, capacity=1), Edge(start='f', end='e', cost=1, capacity=1), Edge(start='g', end='f', cost=1, capacity=1), Edge(start='h', end='g', cost=1, capacity=1), Edge(start='a', end='h', cost=1, capacity=1), Edge(start='c', end='a', cost=1, capacity=1), Edge(start='e', end='d', cost=1, capacity=1), Edge(start='g', end='e', cost=1, capacity=1), Edge(start='a', end='g', cost=1, capacity=1)]
